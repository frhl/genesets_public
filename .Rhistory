dt[, ICD10_case_include := gsub("\\.", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\.", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\.", "", ICD9_case_include)]
# Replace commas for pipes to get the regular expression ready.
dt[, ICD10_control_exclude := gsub(",|;", " | ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub(",|;", " | ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub(",|;", " | ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub(",|;", " | ", ICD9_case_include)]
# Ensure that the first and final character of the regular expression is a space.
dt[, ICD10_control_exclude := gsub("^(.*)$", " \\1 ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("^(.*)$", " \\1 ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("^(.*)$", " \\1 ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("^(.*)$", " \\1 ", ICD9_case_include)]
# Remove asterisks
dt[, ICD10_control_exclude := gsub("\\*", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\*", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\*", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\*", "", ICD9_case_include)]
# Replace entries that only contain whitespace with "" for each specified column
dt$ICD10_control_exclude[grepl("^\\s*$", dt$ICD10_control_exclude)] <- ""
dt$ICD10_case_include[grepl("^\\s*$", dt$ICD10_case_include)] <- ""
dt$ICD9_control_exclude[grepl("^\\s*$", dt$ICD9_control_exclude)] <- ""
dt$ICD9_case_include[grepl("^\\s*$", dt$ICD9_case_include)] <- ""
# set NAs to ""
dt$ICD10_control_exclude[which(is.na(dt$ICD10_control_exclude))] <- ""
dt$ICD10_case_include[which(is.na(dt$ICD10_case_include))] <- ""
dt$ICD9_control_exclude[which(is.na(dt$ICD9_control_exclude))] <- ""
dt$ICD9_case_include[which(is.na(dt$ICD9_case_include))] <- ""
return(dt)
}
d <- munge_ICD_proposals()
library(googlesheets4)
d <- munge_ICD_proposals()
munge_ICD_proposals <- function() {
# Download and extract the case and control ICD9/10 codes from the BRaVa nominate phenotypes file
dt <- read_sheet("https://docs.google.com/spreadsheets/d/1YqdSyxf2OyoIYvLnDVj7NmbpebtppsgyJSq18gkVAWI/edit#gid=1716081249", sheet="ICD_Phecode", skip=3)
print(head(dt))
cols <- c(
"Description",
"ICD10_control_exclude", "ICD10_case_include",
"ICD9_control_exclude", "ICD9_case_include")
dt <- dt[, cols, with=FALSE]
# Remove empty rows
dt <- dt %>% filter(!is.na(Description))
names(dt) <- c("phenotype", "ICD10_control_exclude", "ICD10_case_include", "ICD9_control_exclude", "ICD9_case_include")
dt <- data.table(dt)
# Remove any extra spaces
dt[, ICD10_control_exclude := gsub("[[:space:]]", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("[[:space:]]", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("[[:space:]]", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("[[:space:]]", "", ICD9_case_include)]
# Replace '.'s with '' (it's an equivalent encoding for ICD codes).
dt[, ICD10_control_exclude := gsub("\\.", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\.", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\.", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\.", "", ICD9_case_include)]
# Replace commas for pipes to get the regular expression ready.
dt[, ICD10_control_exclude := gsub(",|;", " | ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub(",|;", " | ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub(",|;", " | ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub(",|;", " | ", ICD9_case_include)]
# Ensure that the first and final character of the regular expression is a space.
dt[, ICD10_control_exclude := gsub("^(.*)$", " \\1 ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("^(.*)$", " \\1 ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("^(.*)$", " \\1 ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("^(.*)$", " \\1 ", ICD9_case_include)]
# Remove asterisks
dt[, ICD10_control_exclude := gsub("\\*", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\*", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\*", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\*", "", ICD9_case_include)]
# Replace entries that only contain whitespace with "" for each specified column
dt$ICD10_control_exclude[grepl("^\\s*$", dt$ICD10_control_exclude)] <- ""
dt$ICD10_case_include[grepl("^\\s*$", dt$ICD10_case_include)] <- ""
dt$ICD9_control_exclude[grepl("^\\s*$", dt$ICD9_control_exclude)] <- ""
dt$ICD9_case_include[grepl("^\\s*$", dt$ICD9_case_include)] <- ""
# set NAs to ""
dt$ICD10_control_exclude[which(is.na(dt$ICD10_control_exclude))] <- ""
dt$ICD10_case_include[which(is.na(dt$ICD10_case_include))] <- ""
dt$ICD9_control_exclude[which(is.na(dt$ICD9_control_exclude))] <- ""
dt$ICD9_case_include[which(is.na(dt$ICD9_case_include))] <- ""
return(dt)
}
d <- munge_ICD_proposals()
dt <- read_sheet("https://docs.google.com/spreadsheets/d/1YqdSyxf2OyoIYvLnDVj7NmbpebtppsgyJSq18gkVAWI/edit#gid=1716081249", sheet="ICD_Phecode", skip=3)
print(head(dt))
cols <- c(
"Description",
"ICD10_control_exclude", "ICD10_case_include",
"ICD9_control_exclude", "ICD9_case_include")
dt <- dt[, cols, with=FALSE]
dt
munge_ICD_proposals <- function() {
# Download and extract the case and control ICD9/10 codes from the BRaVa nominate phenotypes file
dt <- read_sheet("https://docs.google.com/spreadsheets/d/1YqdSyxf2OyoIYvLnDVj7NmbpebtppsgyJSq18gkVAWI/edit#gid=1716081249", sheet="ICD_Phecode", skip=3)
print(head(dt))
cols <- c(
"Description",
"ICD10_control_exclude", "ICD10_case_include",
"ICD9_control_exclude", "ICD9_case_include")
dt <- dt[, cols, with=FALSE]
# Remove empty rows
dt <- dt %>% filter(!is.na(Description))
names(dt) <- c("phenotype", "ICD10_control_exclude", "ICD10_case_include", "ICD9_control_exclude", "ICD9_case_include")
dt <- data.table(dt)
# Remove any extra spaces
dt[, ICD10_control_exclude := gsub("[[:space:]]", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("[[:space:]]", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("[[:space:]]", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("[[:space:]]", "", ICD9_case_include)]
# Replace '.'s with '' (it's an equivalent encoding for ICD codes).
dt[, ICD10_control_exclude := gsub("\\.", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\.", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\.", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\.", "", ICD9_case_include)]
# Replace commas for pipes to get the regular expression ready.
dt[, ICD10_control_exclude := gsub(",|;", " | ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub(",|;", " | ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub(",|;", " | ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub(",|;", " | ", ICD9_case_include)]
# Ensure that the first and final character of the regular expression is a space.
dt[, ICD10_control_exclude := gsub("^(.*)$", " \\1 ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("^(.*)$", " \\1 ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("^(.*)$", " \\1 ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("^(.*)$", " \\1 ", ICD9_case_include)]
# Remove asterisks
dt[, ICD10_control_exclude := gsub("\\*", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\*", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\*", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\*", "", ICD9_case_include)]
# Replace entries that only contain whitespace with "" for each specified column
dt$ICD10_control_exclude[grepl("^\\s*$", dt$ICD10_control_exclude)] <- ""
dt$ICD10_case_include[grepl("^\\s*$", dt$ICD10_case_include)] <- ""
dt$ICD9_control_exclude[grepl("^\\s*$", dt$ICD9_control_exclude)] <- ""
dt$ICD9_case_include[grepl("^\\s*$", dt$ICD9_case_include)] <- ""
# set NAs to ""
dt$ICD10_control_exclude[which(is.na(dt$ICD10_control_exclude))] <- ""
dt$ICD10_case_include[which(is.na(dt$ICD10_case_include))] <- ""
dt$ICD9_control_exclude[which(is.na(dt$ICD9_control_exclude))] <- ""
dt$ICD9_case_include[which(is.na(dt$ICD9_case_include))] <- ""
return(dt)
}
dt <- read_sheet("https://docs.google.com/spreadsheets/d/1YqdSyxf2OyoIYvLnDVj7NmbpebtppsgyJSq18gkVAWI/edit#gid=1716081249", sheet="ICD_Phecode", skip=3)
print(head(dt))
cols <- c(
"Description",
"ICD10_control_exclude", "ICD10_case_include",
"ICD9_control_exclude", "ICD9_case_include")
dt <- dt[, cols, with=FALSE]
# Remove empty rows
dt <- dt %>% filter(!is.na(Description))
library(dplyr)
# Download and extract the case and control ICD9/10 codes from the BRaVa nominate phenotypes file
dt <- read_sheet("https://docs.google.com/spreadsheets/d/1YqdSyxf2OyoIYvLnDVj7NmbpebtppsgyJSq18gkVAWI/edit#gid=1716081249", sheet="ICD_Phecode", skip=3)
print(head(dt))
cols <- c(
"Description",
"ICD10_control_exclude", "ICD10_case_include",
"ICD9_control_exclude", "ICD9_case_include")
dt <- dt[, cols, with=FALSE]
# Remove empty rows
dt <- dt %>% filter(!is.na(Description))
names(dt) <- c("phenotype", "ICD10_control_exclude", "ICD10_case_include", "ICD9_control_exclude", "ICD9_case_include")
dt <- data.table(dt)
# Remove any extra spaces
dt[, ICD10_control_exclude := gsub("[[:space:]]", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("[[:space:]]", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("[[:space:]]", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("[[:space:]]", "", ICD9_case_include)]
# Replace '.'s with '' (it's an equivalent encoding for ICD codes).
dt[, ICD10_control_exclude := gsub("\\.", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\.", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\.", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\.", "", ICD9_case_include)]
# Replace commas for pipes to get the regular expression ready.
dt[, ICD10_control_exclude := gsub(",|;", " | ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub(",|;", " | ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub(",|;", " | ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub(",|;", " | ", ICD9_case_include)]
# Ensure that the first and final character of the regular expression is a space.
dt[, ICD10_control_exclude := gsub("^(.*)$", " \\1 ", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("^(.*)$", " \\1 ", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("^(.*)$", " \\1 ", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("^(.*)$", " \\1 ", ICD9_case_include)]
# Remove asterisks
dt[, ICD10_control_exclude := gsub("\\*", "", ICD10_control_exclude)]
dt[, ICD10_case_include := gsub("\\*", "", ICD10_case_include)]
dt[, ICD9_control_exclude := gsub("\\*", "", ICD9_control_exclude)]
dt[, ICD9_case_include := gsub("\\*", "", ICD9_case_include)]
# Replace entries that only contain whitespace with "" for each specified column
dt$ICD10_control_exclude[grepl("^\\s*$", dt$ICD10_control_exclude)] <- ""
dt$ICD10_case_include[grepl("^\\s*$", dt$ICD10_case_include)] <- ""
dt$ICD9_control_exclude[grepl("^\\s*$", dt$ICD9_control_exclude)] <- ""
dt$ICD9_case_include[grepl("^\\s*$", dt$ICD9_case_include)] <- ""
# set NAs to ""
dt$ICD10_control_exclude[which(is.na(dt$ICD10_control_exclude))] <- ""
dt$ICD10_case_include[which(is.na(dt$ICD10_case_include))] <- ""
dt$ICD9_control_exclude[which(is.na(dt$ICD9_control_exclude))] <- ""
dt$ICD9_case_include[which(is.na(dt$ICD9_case_include))] <- ""
dt
fwrite(dt, "~/Projects/25_vessel/derived/brava_icd10_icd9.tsv")
1/6
binom.test(13, 16, p = 0.5, alternative = "g")
binom.test(12, 12, p = 0.5, alternative = "g")
binom.test(11, 12, p = 0.5, alternative = "g")
5/12
11/12
binom.test(11, 12, p = 0.5, alternative = "g")
binom.test(12, 12, p = 0.5, alternative = "g")
5/7
2/7
scan(what=numeric())
scan()
x = scan(what=numeric())
x = scan()
x = scan(what=characer())
x = scan(what=character())
x = scan(what=character())
x
unique(x)
cat(unique(x), sep="\n")
x <- unique(x)
paste(x, collapse="|")
paste(paste0("(",x,")"), collapse="|")
223278+175587
list.files("~/Projects/27_genesets_public/genesets_public/exported/")
list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="^[genesets]")
list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="$txt.gz")
list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="txt.gz$")
files <- list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="txt.gz$")
files <- list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="txt.gz$")
f <- files[1]
d <- fread(f)
library(data.table)
files <- list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="txt.gz$")
f <- files[1]
d <- fread(f)
d
genesets <- d[,1]
genesets <- unique(d[,1])
stopifnot("gene_id" %in% colnames(d))
genesets <- unique(d[,1])
genesets
setwd("~/Projects/27_genesets_public/genesets_public/")
library(biomaRt)
library(data.table)
library(jsonlite)
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".pathways"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
geneset = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
}
etwd("~/Projects/27_genesets_public/genesets_public/")
setwd("~/Projects/27_genesets_public/genesets_public/")
library(biomaRt)
library(data.table)
library(jsonlite)
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
json_files_to_process
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".pathways"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
geneset = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
}
json_data <- fromJSON(json_path)
json_data
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".pathways"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".pathways"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
geneset = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$geneset))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
}
warnings()
setwd("~/Projects/27_genesets_public/genesets_public/")
library(biomaRt)
library(data.table)
library(jsonlite)
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".geneset"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
geneset = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$geneset))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$geneset)), outpathways, col.names=FALSE)
}
library(data.table)
files <- list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="txt.gz$")
f <- files[1]
d <- fread(f)
stopifnot("gene_id" %in% colnames(d))
genesets <- unique(d[,1])
d
stopifnot(c("geneset","gene_id") %in% colnames(d))
genesets <- unique(d[,1])
all_genesets <- unique(d$geneset)
gs <- all_genesets[1]
gs <- d[d$geneset %in% gs,]
gs
gs <- all_genesets[1]
genes <- d$gene_id[d$geneset %in% gs]
genes
genes <- d$gene_id[d$geneset %in% gs]
annotations <- c("geneset")
row1 <- paste(c(gs,'var', genes), collapse = " ")
row2 <- paste(c(gs, 'anno', annotations), collapse = " ")
row1
row2
annotations <- rep("geneset", length(genes))
annotations
lapply(all_genesets, function(gs){
genes <- d$gene_id[d$geneset %in% gs]
annotations <- rep("geneset", length(genes))
row1 <- paste(c(gs,'var', genes), collapse = " ")
row2 <- paste(c(gs, 'anno', annotations), collapse = " ")
return(paste0(c(row1, row2), collapse = '\n'))
})
file_basename <- tools::file_path_sans_ext(basename(f))
outfile <- file.path("exported",paste0(file_basename,".txt.gz"))
outfile
file_basename <- gsub(".txt.gz$","",(basename(f))
file_basename
file_basename <- gsub(".txt.gz$","",(basename(f)))
file_basename
file_basename <- gsub(".txt.gz$","",(basename(f)))
outfile <- file.path("exported",paste0(file_basename,".saige_group.txt.gz"))
outfile
file_basename <- gsub(".txt.gz$","",(basename(f)))
outfile <- file.path("exported",paste0(file_basename,".saige_group.txt.gz"))
outfile
file_basename <- gsub(".txt.gz$","",(basename(f)))
outfile <- file.path("exported",paste0(file_basename,".saige_group.txt.gz"))
stopifnot(c("geneset","gene_id") %in% colnames(d))
all_genesets <- unique(d$geneset)
out <- lapply(all_genesets, function(gs){
genes <- d$gene_id[d$geneset %in% gs]
annotations <- rep("geneset", length(genes))
row1 <- paste(c(gs,'var', genes), collapse = " ")
row2 <- paste(c(gs, 'anno', annotations), collapse = " ")
return(paste0(c(row1, row2), collapse = '\n'))
})
out <- null_omit(out)
null_omit <- function(lst) {
lst[!vapply(lst, is.null, logical(1))]
}
file_basename <- gsub(".txt.gz$","",(basename(f)))
outfile <- file.path("exported",paste0(file_basename,".saige_group.txt.gz"))
stopifnot(c("geneset","gene_id") %in% colnames(d))
all_genesets <- unique(d$geneset)
out <- lapply(all_genesets, function(gs){
genes <- d$gene_id[d$geneset %in% gs]
annotations <- rep("geneset", length(genes))
row1 <- paste(c(gs,'var', genes), collapse = " ")
row2 <- paste(c(gs, 'anno', annotations), collapse = " ")
return(paste0(c(row1, row2), collapse = '\n'))
})
out <- null_omit(out)
write(paste("Writing to", outfile), stdout())
writeLines(paste(out, collapse = '\n'), outfile)
oug
out
null_omit <- function(lst) {
lst[!vapply(lst, is.null, logical(1))]
}
library(data.table)
files <- list.files("~/Projects/27_genesets_public/genesets_public/exported/", full.names=TRUE, pattern="txt.gz$")
for (f in files){
write(paste("reading", f, "and writing saige group files.."))
file_basename <- gsub(".txt.gz$","",(basename(f)))
outfile <- file.path("exported",paste0(file_basename,".saige_group.txt.gz"))
# export geneset and gene id
stopifnot(c("geneset","gene_id") %in% colnames(d))
all_genesets <- unique(d$geneset)
out <- lapply(all_genesets, function(gs){
genes <- d$gene_id[d$geneset %in% gs]
annotations <- rep("geneset", length(genes))
row1 <- paste(c(gs,'var', genes), collapse = " ")
row2 <- paste(c(gs, 'anno', annotations), collapse = " ")
return(paste0(c(row1, row2), collapse = '\n'))
})
out <- null_omit(out)
write(paste("Writing to", outfile), stdout())
writeLines(paste(out, collapse = '\n'), outfile)
}
