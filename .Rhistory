)
pathway_info$gene_id <- gene_map[pathway_info$hgnc_symbol]
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
# Print the resulting data.table
print(pathway_data)
setwd("~/Projects/27_genesets_public/genesets_public/")
list.files("json/")
json_files_to_process <- list.files("json/")
json_files_to_process <- list.files("json/", full.names=TRUE)
json_basnemae <- basename(json_path)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basnemae <- basename(json_path)
break
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
# Print the resulting data.table
print(pathway_data)
}
json_basename <- basename(json_path)
json_basename
tools::file_path_sans_ext(basename(json_path))
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways))
fwrite(pathway_data, outfile)
}
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways), "-- writing to", outfile)
fwrite(pathway_data, outfile)
}
library(biomaRt)
library(data.table)
library(jsonlite)
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
}
pathway_data$pathway
unique(pathway_data$pathway)
data.table(unique(pathway_data$pathway))
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
setwd("~/Projects/27_genesets_public/genesets_public/")
library(biomaRt)
library(data.table)
library(jsonlite)
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".pathways"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
}
#
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
tstat
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.csv")
cats
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
cats
tstat
tstat_only <- tstat[,-1]
apply(tstat_only, 2, function(x) x>quantile(x, probs=0.9))
apply(tstat_only, 2, function(x) tstat$ENSGID[x>quantile(x, probs=0.9]))
apply(tstat_only, 2, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)]))
apply(tstat_only, 2, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific_genes <- apply(tstat_only, 2, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific_genes
stack(tissue_specific_genes)
tissue_specific_genes <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific_genes
stack(tissue_specific_genes)
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific <-stack(tissue_specifi)
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific <- stack(tissue_specific)
tissue_specific
cats
cats$Tissue %in% tissue_specific$ind
cats$Tissue.genoppi %in% tissue_specific$ind
normalize_names <- function(names_vector) {
names_vector <- gsub(" [ ]+", " ", names_vector)
names_vector <- gsub(" / ", "/", names_vector)
names_vector <- gsub("([a-z])(\\()", "\\1 \\2", names_vector)
names_vector <- gsub(",", "", names_vector)
names_vector <- gsub("-", " ", names_vector)
names_vector <- gsub("[\\(,\\)]", "", names_vector)
names_vector <- gsub("'", "", names_vector)
names_vector <- gsub(" ", "_", names_vector)
names_vector <- gsub("\\/", "_or_", names_vector)
return(tolower(names_vector))
}
normalize_names(tissue_specific$ind)
tissue_specific$id <- normalize_names(tissue_specific$ind)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
tissue_specific
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
cats$genest <- normalize_names(cats$Tissue.genoppi)
cats$geneset <- normalize_names(cats$Tissue.genoppi)
tissue_specific$geneset %in% cats$geneset
all(tissue_specific$geneset %in% cats$geneset)
cats$geneset <- normalize_names(cats$Tissue)
cats$Tissue
cats$geneset
all(tissue_specific$geneset %in% cats$geneset)
cats
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats)
colnames(cats) <- tolower(colnames(cats))
#
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories
cats$geneset <- normalize_names(cats$issue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
#
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories
cats$geneset <- normalize_names(cats$tissue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
merge(tissue_specific, cats)
merge(tissue_specific, cats, all.x=TRUE)
#
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=0.9)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories
cats$geneset <- normalize_names(cats$tissue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
merged <- merge(tissue_specific, cats, all.x=TRUE)
merged
merged$ind <- NULL
merged
merged$tissue.genoppi <- NULL
merged
# write out
out_prefix <- paste0("exported/gtex.tissue_specific", cutoff)
setwd("~/Projects/27_genesets_public/genesets_public/")
library(biomaRt)
library(data.table)
library(jsonlite)
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".genesets"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
}
cutoffs <- c(0.90,0.95,0.99, 0.999)
for (cutoff in cutoffs){
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
# subset to specific
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=cutoff)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories andn combine
cats$geneset <- normalize_names(cats$tissue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
merged <- merge(tissue_specific, cats, all.x=TRUE)
# clean up
merged$ind <- NULL
merged$tissue.genoppi <- NULL
# write out
out_prefix <- paste0("exported/gtex.tissue_specific", cutoff)
fwrite(merged, paste0(out_prefix, ".txt.gz"))
fwrite(unique(merged$geneset), paste0(out_prefix, ".genesets"), colnames=FALSE)
}
cutoffs <- c(0.90,0.95,0.99, 0.999)
for (cutoff in cutoffs){
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
# subset to specific
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=cutoff)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories andn combine
cats$geneset <- normalize_names(cats$tissue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
merged <- merge(tissue_specific, cats, all.x=TRUE)
# clean up
merged$ind <- NULL
merged$tissue.genoppi <- NULL
# write out
out_prefix <- paste0("exported/gtex.tissue_specific", cutoff)
fwrite(merged, paste0(out_prefix, ".txt.gz"))
fwrite(data.table(unique(merged$geneset)), paste0(out_prefix, ".genesets"), colnames=FALSE)
}
data.table(unique(merged$geneset))
normalize_names <- function(names_vector) {
names_vector <- gsub(" [ ]+", " ", names_vector)
names_vector <- gsub(" / ", "/", names_vector)
names_vector <- gsub("([a-z])(\\()", "\\1 \\2", names_vector)
names_vector <- gsub(",", "", names_vector)
names_vector <- gsub("-", " ", names_vector)
names_vector <- gsub("[\\(,\\)]", "", names_vector)
names_vector <- gsub("'", "", names_vector)
names_vector <- gsub(" ", "_", names_vector)
names_vector <- gsub("\\/", "_or_", names_vector)
return(tolower(names_vector))
}
#
cutoffs <- c(0.90,0.95,0.99, 0.999)
for (cutoff in cutoffs){
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
# subset to specific
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=cutoff)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories andn combine
cats$geneset <- normalize_names(cats$tissue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
merged <- merge(tissue_specific, cats, all.x=TRUE)
# clean up
merged$ind <- NULL
merged$tissue.genoppi <- NULL
# write out
out_prefix <- paste0("exported/gtex.tissue_specific", cutoff)
fwrite(merged, paste0(out_prefix, ".txt.gz"))
fwrite(data.table(unique(merged$geneset)), paste0(out_prefix, ".genesets"), col.names=FALSE)
}
normalize_names <- function(names_vector) {
names_vector <- gsub(" [ ]+", " ", names_vector)
names_vector <- gsub(" / ", "/", names_vector)
names_vector <- gsub("([a-z])(\\()", "\\1 \\2", names_vector)
names_vector <- gsub(",", "", names_vector)
names_vector <- gsub("-", " ", names_vector)
names_vector <- gsub("[\\(,\\)]", "", names_vector)
names_vector <- gsub("'", "", names_vector)
names_vector <- gsub(" ", "_", names_vector)
names_vector <- gsub("\\/", "_or_", names_vector)
return(tolower(names_vector))
}
#
cutoffs <- c(0.90,0.95,0.99, 0.999)
for (cutoff in cutoffs){
tstat <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEx.tstat.tsv")
cats <- fread("~/Projects/09_genesets/genesets/data/gtex/GTEX.tstat.categories.genoppi.csv")
colnames(cats) <- tolower(colnames(cats))
# subset to specific
tstat_only <- tstat[,-1]
tissue_specific <- lapply(tstat_only, function(x) tstat$ENSGID[x>quantile(x, probs=cutoff)])
tissue_specific <- stack(tissue_specific)
tissue_specific$geneset <- normalize_names(tissue_specific$ind)
# normalise categories andn combine
cats$geneset <- normalize_names(cats$tissue)
stopifnot(all(tissue_specific$geneset %in% cats$geneset))
merged <- merge(tissue_specific, cats, all.x=TRUE)
# clean up
merged$ind <- NULL
merged$tissue.genoppi <- NULL
print(paste("gensets:", nrow(merged)))
# write out
out_prefix <- paste0("exported/gtex.tissue_specific", cutoff)
fwrite(merged, paste0(out_prefix, ".txt.gz"))
fwrite(data.table(unique(merged$geneset)), paste0(out_prefix, ".genesets"), col.names=FALSE)
}
# get genemap
ensembl <- useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh = 38)
result <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
result <- result[result$hgnc_symbol!="",]
gene_map <- result$ensembl_gene_id
names(gene_map) <- result$hgnc_symbol
# Read the JSON file
json_files_to_process <- list.files("json/", full.names=TRUE)
for (json_path in json_files_to_process){
json_data <- fromJSON(json_path)
json_basename <- tools::file_path_sans_ext(basename(json_path))
outfile <- file.path("exported",paste0(json_basename,".txt.gz"))
outpathways <- file.path("exported",paste0(json_basename,".genesets"))
# Initialize an empty list to store pathway names and gene names
pathway_list <- list()
# Iterate over each pathway in the JSON data
for (pathway_name in names(json_data)) {
pathway <- json_data[[pathway_name]]
# Extract gene names
gene_symbols <- pathway$geneSymbols
# Extract other relevant information
external_details_url <- pathway$externalDetailsURL
msigdb_url <- pathway$msigdbURL
# Store pathway name, gene names, and other relevant information in a list
pathway_info <- list(
pathway = pathway_name,
hgnc_symbol = gene_symbols
)
# Append the pathway information to the list
pathway_list <- c(pathway_list, list(pathway_info))
}
# Convert the list to a data.table
pathway_data <- rbindlist(pathway_list, fill = TRUE)
pathway_data$gene_id <- gene_map[pathway_data$hgnc_symbol]
n_pathways <- length(unique(pathway_data$pathway))
print(paste("Pathways:", n_pathways, "-- writing to", outfile))
fwrite(pathway_data, outfile)
fwrite(data.table(unique(pathway_data$pathway)), outpathways, col.names=FALSE)
}
